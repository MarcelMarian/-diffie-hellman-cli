#!/bin/sh

# Containerise application

set -eu

DEFAULT_OS=linux
DEFAULT_ARCH=amd64
DEFAULT_APPNAME=cspgo
DEFAULT_VERSION=1.0.0
DEFAULT_REGISTRY=registry.gear.ge.com/csp
DEFAULT_BASE_IMAGE=scratch
DEFAULT_APPSOURCE=bin

: "${OS:=${DEFAULT_OS}}"
: "${ARCH:=${DEFAULT_ARCH}}"
: "${APPNAME:=${DEFAULT_APPNAME}}"
: "${VERSION:=${DEFAULT_VERSION}}"
: "${REGISTRY:=${DEFAULT_REGISTRY}}"
: "${BASEIMAGE:=${DEFAULT_BASE_IMAGE}}"
: "${APPSOURCE:=${DEFAULT_APPSOURCE}}"

if [ "$ARCH" != "$DEFAULT_ARCH" ]; then
  APPSOURCE=bin/${OS}_${ARCH}
fi

echo "Containerising ${APPSOURCE}/${APPNAME} for ${ARCH}"
if [ -f ${APPSOURCE}/${APPNAME} ]; then
  TAG=${VERSION}__${OS}_${ARCH}
  sed -e "s|{ARG_SRC}|${APPSOURCE}|g" \
      -e "s|{ARG_BIN}|${APPNAME}|g" \
      -e "s|{ARG_FROM}|${BASEIMAGE}|g" \
    Dockerfile.in > dockerfile-${APPNAME}-${OS}_${ARCH}
  docker build -t ${REGISTRY}/${APPNAME}:${TAG} -f dockerfile-${APPNAME}-${OS}_${ARCH} .
  rm -f dockerfile-${APPNAME}-${OS}_${ARCH}
else
  echo "Could not find ${APPSOURCE}/${APPNAME}"
  exit 1
fi
